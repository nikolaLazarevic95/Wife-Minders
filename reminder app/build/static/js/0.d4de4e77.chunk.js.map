{"version":3,"sources":["hooks/use-http.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","lib/api.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread.js","../node_modules/babel-preset-react-app/node_modules/regenerator-runtime/runtime-module.js","../node_modules/babel-preset-react-app/node_modules/regenerator-runtime/runtime.js"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","arguments","length","undefined","_useReducer","useReducer","_useReducer2","Object","C_Users_nikol_OneDrive_reminder_app_reminder_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__","httpState","dispatch","sendRequest","useCallback","_ref","C_Users_nikol_OneDrive_reminder_app_reminder_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","C_Users_nikol_OneDrive_reminder_app_reminder_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","a","mark","_callee","requestData","wrap","_context","prev","next","sent","t0","message","stop","_x","apply","this","C_Users_nikol_OneDrive_reminder_app_reminder_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","module","exports","__webpack_require__","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","_asyncToGenerator","fn","self","args","err","d","__webpack_exports__","FIREBASE_DOMAIN","getAllReminders","_getAllReminders","response","transformedReminders","reminderObj","C_Users_nikol_OneDrive_reminder_app_reminder_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","fetch","concat","json","ok","Error","C_Users_nikol_OneDrive_reminder_app_reminder_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","id","push","abrupt","addReminder","_addReminder","_callee2","reminderData","_context2","method","body","JSON","stringify","headers","Content-Type","_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","_s","_i","Symbol","iterator","_iterableToArrayLimit","TypeError","_nonIterableRest","_defineProperty","obj","defineProperty","enumerable","configurable","writable","_objectSpread","target","source","ownKeys","keys","getOwnPropertySymbols","filter","sym","getOwnPropertyDescriptor","forEach","g","Function","hadRuntime","regeneratorRuntime","getOwnPropertyNames","indexOf","oldRuntime","e","global","Op","prototype","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","call","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","name","setPrototypeOf","__proto__","awrap","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","tryLocsList","iter","result","toString","object","reverse","pop","Context","reset","skipTempReset","_sent","delegate","tryEntries","resetTryEntry","charAt","isNaN","slice","rootRecord","completion","rval","dispatchException","exception","context","handle","loc","caught","record","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","previousPromise","callInvokeWithMethodAndArg","invoke","unwrapped","return","pushTryEntry","locs","iteratorMethod"],"mappings":"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","file":"static/js/0.d4de4e77.chunk.js","sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const FIREBASE_DOMAIN = 'https://react-http-8e7b6-default-rtdb.europe-west1.firebasedatabase.app/';\n\nexport async function getAllReminders() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/reminders.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch reminder.');\n  }\n\n  const transformedReminders = [];\n\n  for (const key in data) {\n    const reminderObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedReminders.push(reminderObj);\n  }\n\n  return transformedReminders;\n}\n\n\n\nexport async function addReminder(reminderData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/reminders.json`, {\n    method: 'POST',\n    body: JSON.stringify(reminderData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create reminder.');\n  }\n\n  return null;\n}\n\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = function () {\n  return this || typeof self === \"object\" && self;\n}() || Function(\"return this\")(); // Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\n\n\nvar hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0; // Save the old regeneratorRuntime in case it needs to be restored later.\n\nvar oldRuntime = hadRuntime && g.regeneratorRuntime; // Force reevalutation of runtime.js.\n\ng.regeneratorRuntime = undefined;\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch (e) {\n    g.regeneratorRuntime = undefined;\n  }\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n!function (global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    } // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n\n\n    return;\n  } // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n\n\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n\n\n  var IteratorPrototype = {};\n\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      prototype[method] = function (arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  runtime.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  runtime.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n\n  runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  runtime.async = function (innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));\n    return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  Gp[iteratorSymbol] = function () {\n    return this;\n  };\n\n  Gp.toString = function () {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  runtime.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n}( // In sloppy mode, unbound `this` refers to the global object, fallback to\n// Function constructor if we're in global strict mode. That is sadly a form\n// of indirect eval which violates Content Security Policy.\nfunction () {\n  return this || typeof self === \"object\" && self;\n}() || Function(\"return this\")());"],"sourceRoot":""}