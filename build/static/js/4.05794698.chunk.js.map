{"version":3,"sources":["components/Reminders/ReminderItem.module.css","components/Reminders/ReminderList.module.css","components/Reminders/NoRemindersFound.module.css","components/Reminders/ReminderItem.js","components/Reminders/ReminderList.js","components/Reminders/NoRemindersFound.js","pages/AllReminders.js"],"names":["module","exports","item","list","sorting","noquotes","ReminderItem","props","react_default","a","createElement","className","classes","text","ReminderList","reminders","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedReminders","sort","reminderA","reminderB","id","react","onClick","push","pathname","concat","map","reminder","Reminders_ReminderItem","key","NoRemindersFound","react_router_dom","to","AllReminders","_useHttp","useHttp","getAllReminders","sendRequest","status","loadedReminders","data","error","useEffect","style","display","justifyContent","alignItems","height","LoadingSpinner","length","Reminders_ReminderList","Reminders_NoRemindersFound"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,KAAA,gDCAlBF,EAAAC,QAAA,CAAkBE,KAAA,2BAAAC,QAAA,mDCAlBJ,EAAAC,QAAA,CAAkBI,SAAA,wHCeHC,EAbM,SAACC,GACpB,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAQV,MACrBM,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,kBACEF,EAAAC,EAAAC,cAAA,SAAIH,EAAMM,2BCyCLC,EAlCM,SAACP,GAEpB,IAXqBQ,EAAWC,EAW1BC,EAAUC,cACVC,EAAWC,cAGXC,EAAiD,QADnC,IAAIC,gBAAgBH,EAASI,QACVC,IAAI,QAErCC,GAjBeV,EAiBiBR,EAAMQ,UAjBZC,EAiBuBK,EAhBhDN,EAAUW,KAAK,SAACC,EAAWC,GAChC,OAAIZ,EACKW,EAAUE,GAAKD,EAAUC,GAAK,GAAK,EAEnCF,EAAUE,GAAKD,EAAUC,GAAK,GAAK,KAoB9C,OACErB,EAAAC,EAAAC,cAACoB,EAAA,SAAD,KACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQR,SACtBI,EAAAC,EAAAC,cAAA,UAAQqB,QATY,WACxBd,EAAQe,KAAK,CACXC,SAAWd,EAASc,SACpBV,OAAM,SAAAW,OAAab,EAAmB,QAAU,WAM9C,QAA0CA,EAAmB,aAAe,cAE9Eb,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAQT,MACpBsB,EAAgBU,IAAI,SAACC,GAAD,OACnB5B,EAAAC,EAAAC,cAAC2B,EAAD,CACEC,IAAKF,EAASP,GACdA,GAAIO,EAASP,GACbhB,KAAMuB,EAASvB,4DCzBZ0B,EAXU,WACvB,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQP,UACtBG,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAM7B,UAAU,YAAY8B,GAAG,iBAA/B,oBC+BSC,UA/BM,WAAM,IAAAC,EAMrBC,YAAQC,KAAiB,GAJ3BC,EAFuBH,EAEvBG,YACAC,EAHuBJ,EAGvBI,OACMC,EAJiBL,EAIvBM,KACAC,EALuBP,EAKvBO,MAOF,OAJAC,oBAAU,WACRL,KACC,CAACA,IAEW,YAAXC,EAEAvC,EAAAC,EAAAC,cAAA,OAAK0C,MAAO,CAACC,QAAS,OAASC,eAAe,SAAUC,WAAW,SAAUC,OAAQ,UACnFhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,OAKFP,EACK1C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBuC,GAG3B,cAAXH,GAA4BC,GAA8C,IAA3BA,EAAgBU,OAI5DlD,EAAAC,EAAAC,cAACiD,EAAD,CAAc5C,UAAWiC,IAHjBxC,EAAAC,EAAAC,cAACkD,EAAD","file":"static/js/4.05794698.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ReminderItem_item__2IEg5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ReminderList_list__3SVkM\",\"sorting\":\"ReminderList_sorting__2ZJq5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoRemindersFound_noquotes__2D8fg\"};","import React from 'react'\r\nimport classes from \"./ReminderItem.module.css\";\r\n\r\nconst ReminderItem = (props) => {\r\n  return (\r\n    <li className={classes.item}>\r\n      <figure>\r\n        <blockquote>\r\n          <p>{props.text}</p>\r\n        </blockquote>\r\n      </figure>\r\n      {/* <a className=\"btn\">View Fullscreen</a> */}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ReminderItem;\r\n","import React from 'react'\nimport { Fragment } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport ReminderItem from './ReminderItem'\nimport classes from './ReminderList.module.css';\n\nconst sortReminders = (reminders, ascending) => {\n  return reminders.sort((reminderA, reminderB) => {\n    if (ascending) {\n      return reminderA.id > reminderB.id ? 1 : -1;\n    } else {\n      return reminderA.id < reminderB.id ? 1 : -1;\n    }\n  });\n};\nconst ReminderList = (props) => {\n\n  const history = useHistory()\n  const location=  useLocation()\n\n  const queryParams = new URLSearchParams(location.search)\n  const isSortingAscending = queryParams.get('sort') === 'asc'\n\n  const sortedReminders = sortReminders(props.reminders, isSortingAscending)\n\n  const changeSortHandler = ()  => {\n    history.push({\n      pathname : location.pathname,\n      search : `?sort=${(isSortingAscending?'desc ' : 'asc')}`\n    })\n  }\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortHandler}>Sort {isSortingAscending?'Descending' : 'Ascending'}</button>\n      </div>\n      <ul className={classes.list}>\n        {sortedReminders.map((reminder) => (\n          <ReminderItem\n            key={reminder.id}\n            id={reminder.id}\n            text={reminder.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default ReminderList;","import React from 'react'\nimport { Link } from 'react-router-dom';\n\nimport classes from './NoRemindersFound.module.css';\n\nconst NoRemindersFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No reminders found!</p>\n      <Link className='btn--flat' to='/new-reminder'>\n        Add a Reminder\n      </Link>\n    </div>\n  );\n};\n\nexport default NoRemindersFound;\n","import React from 'react'\r\nimport { useEffect } from \"react\";\r\nimport ReminderList from \"../components/Reminders/ReminderList\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllReminders } from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport NoRemindersFound from \"../components/Reminders/NoRemindersFound\";\r\n\r\n\r\nconst AllReminders = () => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedReminders,\r\n    error,\r\n  } = useHttp(getAllReminders, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest();\r\n  }, [sendRequest]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '100vh'}}>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error}</p>;\r\n  }\r\n\r\n  if (status === 'completed' && (!loadedReminders || loadedReminders.length === 0)) {\r\n          return <NoRemindersFound/>\r\n  }\r\n\r\n  return <ReminderList reminders={loadedReminders} />;\r\n};\r\n\r\nexport default AllReminders;\r\n"],"sourceRoot":""}